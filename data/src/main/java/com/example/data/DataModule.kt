package com.example.data

import com.example.data.qualifiers.AutogeneratedRetrofitClient
import com.squareup.moshi.Moshi
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import okhttp3.OkHttpClient
import retrofit2.Retrofit
import retrofit2.converter.moshi.MoshiConverterFactory
import java.util.concurrent.TimeUnit
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
class DataModule {

    @Provides
    @Singleton
    @AutogeneratedRetrofitClient
    internal fun provideAutogeneratedRetrofitClient(
        moshi: Moshi,
        configuration: Configuration,
        okHttp: OkHttpClient,
    ): Retrofit {
        return getRetrofitClient(
            okHttp = okHttp,
            baseUrl = configuration.baseUrl,
            moshi = moshi
        )
    }
    @Provides
    @Singleton
    internal fun providesOkHttpClient(): OkHttpClient = OkHttpClient.Builder()
//        .connectTimeout(30, TimeUnit.SECONDS)
//        .readTimeout(60, TimeUnit.SECONDS)
//        .writeTimeout(60, TimeUnit.SECONDS)
        .build()

    @Provides
    @Singleton
    internal fun providesMoshi(): Moshi = Moshi.Builder().add(KotlinJsonAdapterFactory()).build()
    private fun getRetrofitClient(
        okHttp: OkHttpClient,
        baseUrl: String,
        moshi: Moshi
    ) = Retrofit.Builder()
        .addConverterFactory(MoshiConverterFactory.create(moshi))
        .client(okHttp)
        .baseUrl(baseUrl)
        .build()
}